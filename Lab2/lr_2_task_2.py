# -*- coding: utf-8 -*-
"""lr_2_task_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rfaxCkb-TOsKLlX0rtbat7pV1bOVjeEu
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn import preprocessing
from sklearn.svm import LinearSVC
from sklearn.multiclass import OneVsOneClassifier
from sklearn.model_selection import train_test_split
input_file = 'income_data.txt'
# Читання даних
X = []
y = []
count_class1 = 0
count_class2 = 0
max_datapoints = 25000
input_file = 'income_data.txt'
X = []  # Один масив X для всіх даних
max_datapoints = 25000
count_class1 = 0
count_class2 = 0

with open(input_file, 'r') as f:
    for line in f.readlines():
        if count_class1 >= max_datapoints and count_class2 >= max_datapoints:
            break
        if '?' in line:
            continue

        data = line[:-1].split(', ')
        if data[-1] == '<=50K' and count_class1 < max_datapoints:
            X.append(data)
            count_class1 += 1
        elif data[-1] == '>50K' and count_class2 < max_datapoints:
            X.append(data)
            count_class2 += 1

# Перевірка кількості точок у кожному класі
print("Кількість точок у класі <=50K:", count_class1)
print("Кількість точок у класі >50K:", count_class2)

# Перетворення на масив numpy
X = np.array(X)

# Виведіть інформацію про кількість точок у масиві X
print("Кількість точок у масиві X:", len(X))

# Перетворення рядкових даних на числові
label_encoder = []
X_encoded = np.empty(X.shape)

for i, item in enumerate(X[0]):
    if item.isdigit():
        X_encoded[:, i] = X[:, i]
    else:
        label_encoder.append(preprocessing.LabelEncoder())
        X_encoded[:, i] = label_encoder[-1].fit_transform(X[:, i])

X = X_encoded[:, :-1].astype(int)
y = X_encoded[:, -1].astype(int)

import warnings
warnings.filterwarnings("ignore")
from sklearn.svm import LinearSVC
from sklearn.multiclass import OneVsOneClassifier
from sklearn.model_selection import train_test_split

# Створення SVМ-класифікатора
classifier = OneVsOneClassifier(LinearSVC(random_state=0))

# Навчання класифікатора
classifier.fit(X, y)

# Розділення даних на навчальний та тестовий набори
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=5)

# Створення нового класифікатора для навчання на навчальних даних
classifier = OneVsOneClassifier(LinearSVC(random_state=0))
classifier.fit(X_train, y_train)

# Прогнозування на тестових даних
y_test_pred = classifier.predict(X_test)

from sklearn.model_selection import cross_val_score

# Обчислення F-міри для SVМ-класифікатора з використанням крос-валідації
f1 = cross_val_score(classifier, X, y, scoring='f1_weighted', cv=3)
print("F1 score: " + str(round(100 * f1.mean(), 2)) + "%")

# Передбачення результату для тестової точки даних
input_data = ['37', 'Private', '215646', 'HS-grad', '9', 'Never-married', 'Han-dlers-cleaners', 'Not-in-family', 'White', 'Male',
'0', '0', '40', 'United-States']

# Кодування тестової точки даних
input_data_encoded = [-1] * len(input_data)
count = 0
for i, item in enumerate(input_data):
    if item.isdigit():
        input_data_encoded[i] = int(input_data[i])


input_data_encoded = np.array(input_data_encoded).reshape(1, -1)

# Використання класифікатора для кодованої точки даних
# та виведення результату
predicted_class = classifier.predict(input_data_encoded)
print(label_encoder[-1].inverse_transform(predicted_class)[0])
from sklearn.metrics import accuracy_score, precision_score, recall_score

# Отримання передбачених класів для тестових даних
y_test_pred = classifier.predict(X_test)

# Обчислення акуратності
accuracy = accuracy_score(y_test, y_test_pred)
print("Accuracy:",100 * accuracy)

# Обчислення точності
precision = precision_score(y_test, y_test_pred)
print("Precision:",100 * precision)

# Обчислення повноти
recall = recall_score(y_test, y_test_pred)
print("Recall:",100 * recall)

from sklearn.svm import SVC

# Створення класифікатора з поліноміальним ядром
poly_classifier = SVC(kernel='poly', degree=2, random_state=0)
poly_classifier.fit(X_train, y_train)

# Прогнозування на тестових даних
y_test_pred_poly = poly_classifier.predict(X_test)

# Оцінка результатів
accuracy_poly = accuracy_score(y_test, y_test_pred_poly)
precision_poly = precision_score(y_test, y_test_pred_poly)
recall_poly = recall_score(y_test, y_test_pred_poly)
print("Показники для нелінійного класифікатора SVM з поліноміальним ядром:")
print("Accuracy:", 100 * accuracy_poly)
print("Precision:", 100 * precision_poly)
print("Recall:", 100 * recall_poly)

from sklearn.svm import SVC

# Створення класифікатора з гаусовим (RBF) ядром
rbf_classifier = SVC(kernel='rbf', random_state=0)
rbf_classifier.fit(X_train, y_train)

# Прогнозування на тестових даних
y_test_pred_rbf = rbf_classifier.predict(X_test)

# Оцінка результатів
accuracy_rbf = accuracy_score(y_test, y_test_pred_rbf)
precision_rbf = precision_score(y_test, y_test_pred_rbf)
recall_rbf = recall_score(y_test, y_test_pred_rbf)
print("Показники для нелінійного класифікатора SVM з гаусовим ядром:")
print("Accuracy:", 100 * accuracy_rbf)
print("Precision:", 100 * precision_rbf)
print("Recall:", 100 * recall_rbf)

from sklearn.svm import SVC

# Створення класифікатора з сигмоїдальним ядром
sigmoid_classifier = SVC(kernel='sigmoid', random_state=0)
sigmoid_classifier.fit(X_train, y_train)

# Прогнозування на тестових даних
y_test_pred_sigmoid = sigmoid_classifier.predict(X_test)

# Оцінка результатів
accuracy_sigmoid = accuracy_score(y_test, y_test_pred_sigmoid)
precision_sigmoid = precision_score(y_test, y_test_pred_sigmoid)
recall_sigmoid = recall_score(y_test, y_test_pred_sigmoid)
print("Показники для нелінійного класифікатора SVM з сигмоїдальним ядром:")
print("Accuracy:", 100 * accuracy_sigmoid)
print("Precision:", 100 * precision_sigmoid)
print("Recall:", 100 * recall_sigmoid)