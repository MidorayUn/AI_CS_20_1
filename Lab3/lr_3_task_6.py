# -*- coding: utf-8 -*-
"""lr_3_task_6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fVMFG4aH7gfnt79_vvA1KPVdzFvo9OHI
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import PolynomialFeatures

def plot_learning_curves(model, X, y, model_type):
    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2)
    train_errors, val_errors = [], []

    for m in range(1, len(X_train)):
        model.fit(X_train[:m], y_train[:m])
        y_train_predict = model.predict(X_train[:m])
        y_val_predict = model.predict(X_val)
        train_errors.append(mean_squared_error(y_train_predict, y_train[:m]))
        val_errors.append(mean_squared_error(y_val_predict, y_val))

    plt.plot(np.sqrt(train_errors), "r-", linewidth=2, label="train")
    plt.plot(np.sqrt(val_errors), "b-", linewidth=3, label="val")
    plt.xlabel("Training set size")
    plt.ylabel("RMSE")
    plt.legend()
    plt.title(f'Learning Curves for {model_type}')
    plt.show()

# Генеруємо випадкові дані, як у варіанті
m = 100
X = 6 * np.random.rand(m, 1) - 3
y = 0.4 * X ** 2 + X + 4 + np.random.randn(m, 1)

# Створення та побудова кривих навчання для лінійної регресії
lin_reg = LinearRegression()
plot_learning_curves(lin_reg, X, y, "Linear Model")

# Створення та побудова кривих навчання для поліноміальної регресії другого ступеня
poly_reg_2 = Pipeline([
    ("poly features", PolynomialFeatures(degree=2, include_bias=False)),
    ("lin_reg", LinearRegression())
])

plot_learning_curves(poly_reg_2, X, y, "Polynomial Model (Degree 2)")

# Створення та побудова кривих навчання для поліноміальної регресії 10-го ступеня
poly_reg_10 = Pipeline([
    ("poly features", PolynomialFeatures(degree=10, include_bias=False)),
    ("lin_reg", LinearRegression())
])

plot_learning_curves(poly_reg_10, X, y, "Polynomial Model (Degree 10)")