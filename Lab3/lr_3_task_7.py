# -*- coding: utf-8 -*-
"""lr_3_task_7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XWzlHa1hfA555LMgL-RtY2j1rpSySLpw
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn import metrics

# Завантаження вхідних даних із файлу
X = np.loadtxt('data_clustering.txt', delimiter=',')

# Кількість кластерів
num_clusters = 5

# Визуалізація вхідних даних
plt.figure(figsize=(8, 6))
plt.scatter(X[:, 0], X[:, 1], marker='o', edgecolors='black', s=80, c='blue', label='Дані точки')
plt.title('Розподіл даних')
plt.xlabel('Ось X')
plt.ylabel('Ось Y')

# Створення та навчання моделі k-середніх
kmeans = KMeans(n_clusters=num_clusters, init='k-means++', n_init=10, random_state=0)
kmeans.fit(X)

# Побудова центроїд кластерів
centroids = kmeans.cluster_centers_
plt.scatter(centroids[:, 0], centroids[:, 1], s=200, marker='x', c='red', label='Центроїди')

# Вивід результату на графіку
plt.legend()

# Визначення кроку сітки
step_size = 0.01

# Визначення меж сітки
x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
x_vals, y_vals = np.meshgrid(np.arange(x_min, x_max, step_size), np.arange(y_min, y_max, step_size))

# Передбачення вихідних міток для всіх точок сітки
output = kmeans.predict(np.c_[x_vals.ravel(), y_vals.ravel()])

# Відображення областей та виділення їх кольором
output = output.reshape(x_vals.shape)

plt.figure(figsize=(8, 6))
plt.imshow(output, interpolation='nearest', extent=(x_vals.min(), x_vals.max(), y_vals.min(), y_vals.max()), cmap=plt.cm.Paired, origin="lower")

# Відображення вхідних точок
plt.scatter(X[:, 0], X[:, 1], marker='o', edgecolors="black", s=80, c=kmeans.labels_, cmap=plt.cm.Paired)

# Відображення центрів кластерів
cluster_centers = kmeans.cluster_centers_
plt.scatter(cluster_centers[:, 0], cluster_centers[:, 1], marker='o', s=210, linewidths=4, color="black", zorder=12, facecolors='black', label='Центроїди')

plt.title('Кластеризація даних')
plt.xlabel('Ось X')
plt.ylabel('Ось Y')
plt.legend()
plt.show()

# Виведення інформації про кластеризацію
labels = kmeans.labels_
silhouette_score = metrics.silhouette_score(X, labels, metric='euclidean')
print(f"Силуетний коефіцієнт: {silhouette_score}")